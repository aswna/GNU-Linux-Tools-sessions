Voting results
==============
    7 bash scripting
    4 awk
    2 vim tricks
    2 regex
    1 watch fancy YT videos
    1 xml / xmllint
    1 sed
    1 running scripts (how to avoid multiple instances, running too long, etc)
    1 NO awk


Linux performance observability tools
=====================================
    http://www.brendangregg.com/linuxperf.html

    Linux Performance Analysis in 60 seconds
    ----------------------------------------
        http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html
        https://www.youtube.com/watch?v=ZdVpKx6Wmc8 (72 seconds)

         1. uptime                  load averages
         2. dmesg | tail            kernel errors
         3. vmstat 1                overall stats by time
         4. mpstat -P ALL 1         CPU balance
         5. pidstat 1               process usage
         6. iostat -xz 1            disk I/O
         7. free -m                 memory usage
         8. sar -n DEV 1            network I/O
         9. sar -n TCP,ETCP 1       TCP stats
        10. top                     check overview

    Linux Performance Tools
    -----------------------
        https://medium.com/netflix-techblog/netflix-at-velocity-2015-linux-performance-tools-51964ddb81cf
        Linux Performance Tools, Brendan Gregg, part 1 of 2
        https://www.youtube.com/watch?v=FJW8nGV4jxY (54 min)
        Linux Performance Tools, Brendan Gregg, part 2 of 2
        https://www.youtube.com/watch?v=zrr2nUln9Kk (45 min)


To have minimal prompt
======================
    export PS1='$ '


Multiple characters as field separators (awk)
=============================================
    > echo "AxyBBxyCCC"
    AxyBBxyCCC

    # -F value : sets the field separator, FS, to value.
    > echo "AxyBBxyCCC" | awk -F xy '{print $1 $2}'
    ABB

    These are basically the same:
    > echo "AxyBBxyCCC" | awk -F xy '{print $1 "--" $3}'
    > echo "AxyBBxyCCC" | awk -Fxy '{print $1 "--" $3}'
    > echo "AxyBBxyCCC" | awk -F 'xy' '{print $1 "--" $3}'
    > echo "AxyBBxyCCC" | awk -F'xy' '{print $1 "--" $3}'
    > echo "AxyBBxyCCC" | awk 'BEGIN{FS="xy"} {print $1 "--" $3}'
    Output:
    A--CCC


    Trying the same with cut...

    cut cannot handle multiple characters as field separators
    ---------------------------------------------------------
        # -d, --delimiter=DELIM
        #   use DELIM instead of TAB for field delimiter
        # -f, --fields=LIST
        #   select only these fields;  also print any line that contains no delimiter character, unless the -s option is specified

        > echo "AxyBBxyCCC" | cut -d 'xy' -f 1,3
        cut: the delimiter must be a single character

    Putting this separator in a variable does not help (as expected)
    ----------------------------------------------------------------
        > SEP=xy
        > echo "AxyBBxyCCC" | cut -d ${SEP} -f 1,3
        cut: the delimiter must be a single character

    cut with single character delimiter
    -----------------------------------
        # --output-delimiter=STRING
        #   use STRING as the output delimiter the default is to use the input delimiter

        > echo "AxyBBxyCCC" | cut -d 'x' --output-delimiter='--' -f 1,3
        A--yCCC


Some sed behavior and commands
==============================
    > echo "AxyBBxyCCC" | sed ''
    AxyBBxyCCC

    # s/regexp/replacement/
    #   Attempt to match regexp against the pattern space.  If successful, replace that portion matched with replacement.  The replacement may contain the special
    #   character  &  to  refer to that portion of the pattern space which matched, and the special escapes \1 through \9 to refer to the corresponding matching
    #   sub-expressions in the regexp.

    > echo "AxyBBxyCCC\nZZZZZ" | sed 's/A/a/'
    axyBBxyCCC
    ZZZZZ

    # p      Print the current pattern space.

    > echo "AxyBBxyCCC\nZZZZZ" | sed 's/A/a/p'
    axyBBxyCCC
    axyBBxyCCC
    ZZZZZ

    # -n, --quiet, --silent
    #   suppress automatic printing of pattern space
    > echo "AxyBBxyCCC\nZZZZZ" | sed -n ''
    [empty]

    > echo "AxyBBxyCCC\nZZZZZ" | sed -n 's/A/a/p'
    axyBBxyCCC

    > echo "AAAxyBBxyCCC\nZZZZZ" | sed -n 's/A/a/p'
    aAAxyBBxyCCC

    > echo "AAAxyBBxyCCC\nZZZZZ" | sed 's/A/a/g'
    aaaxyBBxyCCC
    ZZZZZ

    > echo "AAAxyBBxyCCC\nZZZZZ" | sed 's/A/a/gp'
    aaaxyBBxyCCC
    aaaxyBBxyCCC
    ZZZZZ

    > echo "AAAxyBBxyCCC\nZZZZZ" | sed -n 's/A/a/gp'
    aaaxyBBxyCCC

    > echo "AxyBBxyCCC" | sed 's/xy/--/'
    A--BBxyCCC

    > echo "AxyBBxyCCC" | sed 's/xy/--/g'
    A--BB--CCC

    > echo "AxyBBxyCCC" | sed 's/\(.*\)xy.*xy\(.*\)/\1--\2/p'
    A--CCC
    A--CCC

    > echo "AxyBBxyCCC" | sed -n 's/\(.*\)xy.*xy\(.*\)/\1--\2/p'
    A--CCC


Instead of using a command-chain try to measure its performance and reduce the number of started commands
=========================================================================================================
    > echo "foo\nbarbar\nbazbazbaz" >| /tmp/xxx

    > cat /tmp/xxx | grep bar | awk '{print length($0)}'

    > time (cat /tmp/xxx | grep bar | awk '{print length($0)}')
    6
    ( cat /tmp/xxx | /bin/grep $=MY_GREP_OPTIONS bar | awk '{print length($0)}'; )  0.00s user 0.00s system 0% cpu 0.002 total

    Trying to reduce the number of instantiated commands
    ----------------------------------------------------
        > awk '/bar/{print length($0)}' /tmp/xxx
        6

        > time awk '/bar/{print length($0)}' /tmp/xxx
        6
        awk '/bar/{print length($0)}' /tmp/xxx  0.00s user 0.00s system 0% cpu 0.002 total

    This proved to be the most efficient in some cases (see below)
    --------------------------------------------------------------
        > time (grep bar /tmp/xxx | awk '{print length($0)}')
        6
        ( /bin/grep $=MY_GREP_OPTIONS bar /tmp/xxx | awk '{print length($0)}'; )  0.00s user 0.00s system 0% cpu 0.002 total


    Sidenote: find some big files
    -----------------------------
        # -size n[cwbkMG]
        #   File uses n units of space, rounding up.

        > find /usr/share -size +10M
        ...
        /usr/share/mythes/th_en_US_v2.dat
        ...

    Try the above on a bigger file
    ------------------------------
        * Naive solution
            # cat ... | grep ... | awk ...
            > time (cat /usr/share/mythes/th_en_US_v2.dat | grep calib | awk '{print length($0)}' >|/tmp/foo.txt)
            ( cat /usr/share/mythes/th_en_US_v2.dat | /bin/grep $=MY_GREP_OPTIONS calib |)  0.01s user 0.01s system 96% cpu 0.017 total

        * Might be expected to be the fastest
            # awk ...
            > time awk '/calib/{print length($0)}' /usr/share/mythes/th_en_US_v2.dat >|/tmp/foo.txt
            awk '/calib/{print length($0)}' /usr/share/mythes/th_en_US_v2.dat >|   0.04s user 0.00s system 89% cpu 0.040 total

        * This might be slightly faster, than the naive solution above
            # grep ... | awk ...
            > time (grep calib /usr/share/mythes/th_en_US_v2.dat | awk '{print length($0)}' >|/tmp/foo.txt)
            ( /bin/grep $=MY_GREP_OPTIONS calib /usr/share/mythes/th_en_US_v2.dat | awk  )  0.01s user 0.00s system 79% cpu 0.015 total



                    ╭──────────────────────────────────────────────╮
                    │ ______ _              o             _   _    │
                    │(_) |  | |             /            | | | |   │
                    │    |  | |     __, _|_   ,     __,  | | | |   │
                    │  _ |  |/ \   /  |  |   / \_  /  |  |/  |/    │
                    │ (_/   |   |_/\_/|_/|_/  \/   \_/|_/|__/|__/  │
                    │                                              │
                    │             _        _   _                   │
                    │            | |      | | | |      |           │
                    │            | |  __  | | | |   ,  |           │
                    │            |/  /  \_|/  |/_) / \_|           │
                    │            |__/\__/ |__/| \_/ \/ o           │
                    │            |\                                │
                    │            |/                                │
                    ╰──────────────────────────────────────────────╯
                                       ¯\_(ツ)_/¯

